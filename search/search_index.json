{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"SE3308/Chapter%201/","title":"Addition","text":""},{"location":"SE3308/Chapter%201/#algo-1-repeated-increments","title":"Algo 1: repeated increments","text":"<p>Start with x, and increment y times say x, y each have n digits</p> <ul> <li>increments &lt;= n steps\uff08\u8fdb\u4f4d\uff09</li> <li>y increments</li> </ul> <p>total steps: y * n &lt;= 10^n * n \u7ea6\u7b49\u4e8e 10^n</p> <p>\uff08y  at most 10^n\uff09</p>"},{"location":"SE3308/Chapter%201/#algo-2","title":"Algo 2 \u7ad6\u5f0f\u76f8\u52a0","text":"<pre><code>456\n141 +\n-----\n</code></pre> <p>\u5927\u7ea6n\u6b21\uff08\u8fdb\u4f4d\u7b97\u662f\u9644\u52a0\u5728\u4e24\u4f4d\u8fd0\u7b97\u4e4b\u95f4\u7684\uff0c\u5bf9\u540c\u4e00\u4f4d\u7f6e\u7684\u4e24\u4e2a\u6570\u5b57\uff0c\u6700\u540e\u6210\u4e3an\u7684\u5e38\u6570\u9879\uff09</p> <p>$f = \\mathcal{O}(n)$</p> <p>\u6700\u4f18\uff1a + \u7b54\u6848\u5c31\u6709n\u4f4d\uff0c\u81f3\u5c11n\u6b65 + \u8f93\u5165\u5c31\u67092n\u4f4d\uff0c\u80af\u5b9a\u8981\u8bfb \u53cd\u6b63\uff0c\u5047\u8bbe&lt;=2n\u6b65\uff0c\u6709\u7684\u8f93\u5165\u6ca1\u6709\u8bfb\u3002 \u90a3\u4e48\u5bf9\u4e0d\u540c\u7684\u4e24\u4e2a\u8f93\u5165\u53ef\u80fd\u8f93\u51fa\u76f8\u540c\u7b54\u6848\uff0c\u4e0d\u5bf9\u3002</p>"},{"location":"SE3308/Chapter%201/#multiplication","title":"Multiplication","text":"<p>given x, y in base 10.return digits of <code>x*y</code> in base 10</p>"},{"location":"SE3308/Chapter%201/#algo-1-reapted-addition","title":"Algo 1: Reapted addition","text":"<p>add x over and over, y times</p> <p>Steps of add * y = n 10^n</p>"},{"location":"SE3308/Chapter%201/#algo-2_1","title":"Algo 2\uff1a\u7ad6\u5f0f","text":"<p>n^2</p> <p><code>x*y</code> &lt;= 2n digits\uff1f</p>"},{"location":"SE3308/Chapter%201/#algo-3-divide-and-conqure-recursion","title":"Algo 3: Divide and Conqure (Recursion)","text":"<p>\u5206\u800c\u6cbb\u4e4b\uff1a\u4f8b\u5b50Merge sort</p> <pre><code>x = 5 1 4 2\ny = 2 0 4 8 \n\ny_high = 2 0 y_low = 4 8\n</code></pre> <p>Recurrence Relation $T(n)$ are steps to mult two n-digit nums using Alg 3.</p> <p>$$T(n)&lt;=  $$</p> <p></p>"},{"location":"SE3308/Introduction/","title":"\u8bfe\u7a0b\u57fa\u672c\u4fe1\u606f","text":"<ul> <li>\u7b97\u6cd5\u8bbe\u8ba1\u00a0(2024-2025-1)</li> <li>\u5b98\u65b9\u7f51\u7ad9\uff1aSE3308</li> <li>22 Lectures</li> </ul>"},{"location":"SE3308/Introduction/#_2","title":"\u6559\u6750","text":"<ul> <li>\u300a\u7b97\u6cd5\u5bfc\u8bba\uff08Algorithms \uff09\u300b\u524d\u4e5d\u7ae0</li> <li>\u662fUCB CS 170\u7684\u5b98\u65b9\u6559\u6750</li> <li>26 Lectures\uff082022 Fall\uff09</li> </ul>"},{"location":"SE3308/Preface%20%26%20Chapter%200/","title":"Preface & Chapter 0","text":"<ul> <li>Part I<ul> <li>numbers, primality, and factoring. </li> <li>RSA cryptosystem</li> <li>divide-and-conquer algorithms for integer multiplication</li> <li>sorting and median finding</li> <li>fast Fourier transform.</li> </ul> </li> <li>Part II<ul> <li>data structures</li> <li>graphs</li> </ul> </li> <li>Part III <ul> <li>dynamic programming (a novel approach helps clarify this traditional stumbling block for students) </li> <li>linear programming\uff08\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u7684\u6570\u5b66\u57fa\u7840\uff09</li> </ul> </li> <li>Part IV<ul> <li>NP-completeness\uff08\u79bb\u6563\u6570\u5b66\uff09, various heuristics, as well as quantum algorithms</li> </ul> </li> </ul>"},{"location":"SE3308/Preface%20%26%20Chapter%200/#fibonacci","title":"Fibonacci","text":""},{"location":"SE3308/Preface%20%26%20Chapter%200/#exponential-algorithm","title":"Exponential Algorithm","text":"<pre><code>function fib1(n):\n    if n=0: return 0\n    if n=1: return 1\n    return fib1(n-1) + fib1(n-2)\n</code></pre> <p>$$T(n) &lt;= 2$$ for $n&lt;=1$</p> <ul> <li>2 recursive invocation</li> <li>2 checks</li> <li>1 addition $$T(n) = T(n-1) + T(n-2) + 3$$ for $n&gt;1$</li> </ul>"},{"location":"SE3308/Preface%20%26%20Chapter%200/#big-o-notation","title":"Big-O Notation","text":"<ul> <li>$f = \\mathcal{O}(g)$: f grows no faster than g</li> <li>$f = \\Omega(g)$ &lt;=&gt; $g = \\mathcal{O}(f)$: f grows no slower than g</li> <li>$f = \\Theta(g)$: $f = \\mathcal{O}(g)$\u4e14$f=\\Omega(g)$</li> </ul> <p>Let f (n) and g(n) be functions from positive integers to positive reals. We say f = O(g) (which means that \u201c f grows no faster than g\u201d) if there is a constant c &gt; 0 such that f (n) \u2264 c \u00b7 g(n)</p>"}]}