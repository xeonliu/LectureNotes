{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Lecture Notes on 2024 Fall","text":"<p>Needs motivation.</p> <p>Have to write Notes.</p> <p>Looks better in Obsidian. Worse here.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"SE3308/Chapter%201/","title":"Addition","text":""},{"location":"SE3308/Chapter%201/#algo-1-repeated-increments","title":"Algo 1: repeated increments","text":"<p>Start with x, and increment y times say x, y each have n digits</p> <ul> <li>increments &lt;= n steps\uff08\u8fdb\u4f4d\uff09</li> <li>y increments</li> </ul> <p>total steps: y * n &lt;= 10^n * n \u7ea6\u7b49\u4e8e 10^n</p> <p>\uff08y  at most 10^n\uff09</p>"},{"location":"SE3308/Chapter%201/#algo-2","title":"Algo 2 \u7ad6\u5f0f\u76f8\u52a0","text":"<pre><code>456\n141 +\n-----\n</code></pre> <p>\u5927\u7ea6n\u6b21\uff08\u8fdb\u4f4d\u7b97\u662f\u9644\u52a0\u5728\u4e24\u4f4d\u8fd0\u7b97\u4e4b\u95f4\u7684\uff0c\u5bf9\u540c\u4e00\u4f4d\u7f6e\u7684\u4e24\u4e2a\u6570\u5b57\uff0c\u6700\u540e\u6210\u4e3an\u7684\u5e38\u6570\u9879\uff09</p> <p>\\(f = \\mathcal{O}(n)\\)</p> <p>\u6700\u4f18\uff1a</p> <ul> <li> <p>\u7b54\u6848\u5c31\u6709n\u4f4d\uff0c\u81f3\u5c11n\u6b65</p> </li> <li> <p>\u8f93\u5165\u5c31\u67092n\u4f4d\uff0c\u80af\u5b9a\u8981\u8bfb</p> </li> </ul> <p>\u53cd\u6b63\uff0c\u5047\u8bbe\\&lt;=2n\u6b65\uff0c\u6709\u7684\u8f93\u5165\u6ca1\u6709\u8bfb\u3002 \u90a3\u4e48\u5bf9\u4e0d\u540c\u7684\u4e24\u4e2a\u8f93\u5165\u53ef\u80fd\u8f93\u51fa\u76f8\u540c\u7b54\u6848\uff0c\u4e0d\u5bf9\u3002</p>"},{"location":"SE3308/Chapter%201/#multiplication","title":"Multiplication","text":"<p>given x, y in base 10.return digits of <code>x*y</code> in base 10</p>"},{"location":"SE3308/Chapter%201/#algo-1-reapted-addition","title":"Algo 1: Reapted addition","text":"<p>add x over and over, y times</p> <p>Steps of add * y = n 10^n</p>"},{"location":"SE3308/Chapter%201/#algo-2_1","title":"Algo 2\uff1a\u7ad6\u5f0f","text":"<p>n^2</p> <p><code>x*y</code> \\&lt;= 2n digits\uff1f</p>"},{"location":"SE3308/Chapter%201/#algo-3-divide-and-conqure-recursion","title":"Algo 3: Divide and Conqure (Recursion)","text":"<p>\u5206\u800c\u6cbb\u4e4b\uff1a\u4f8b\u5b50Merge sort</p> <pre><code>x = 5 1 4 2\ny = 2 0 4 8 \n\ny_high = 2 0 y_low = 4 8\n</code></pre> <p>Recurrence Relation \\(T(n)\\) are steps to mult two n-digit nums using Alg 3.</p> \\[T(n)&lt;=  \\] <p></p>"},{"location":"SE3308/Introduction/","title":"\u8bfe\u7a0b\u57fa\u672c\u4fe1\u606f","text":"<ul> <li>\u7b97\u6cd5\u8bbe\u8ba1\u00a0(2024-2025-1)</li> <li>\u5b98\u65b9\u7f51\u7ad9\uff1aSE3308</li> <li>22 Lectures</li> </ul>"},{"location":"SE3308/Introduction/#_2","title":"\u6559\u6750","text":"<ul> <li>\u300a\u7b97\u6cd5\u5bfc\u8bba\uff08Algorithms \uff09\u300b\u524d\u4e5d\u7ae0</li> <li>\u662fUCB CS 170\u7684\u5b98\u65b9\u6559\u6750</li> <li>26 Lectures\uff082022 Fall\uff09</li> </ul>"},{"location":"SE3308/Preface%20%26%20Chapter%200/","title":"Preface & Chapter 0","text":"<ul> <li>Part I<ul> <li>numbers, primality, and factoring. </li> <li>RSA cryptosystem</li> <li>divide-and-conquer algorithms for integer multiplication</li> <li>sorting and median finding</li> <li>fast Fourier transform.</li> </ul> </li> <li>Part II<ul> <li>data structures</li> <li>graphs</li> </ul> </li> <li>Part III <ul> <li>dynamic programming (a novel approach helps clarify this traditional stumbling block for students) </li> <li>linear programming\uff08\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u7684\u6570\u5b66\u57fa\u7840\uff09</li> </ul> </li> <li>Part IV<ul> <li>NP-completeness\uff08\u79bb\u6563\u6570\u5b66\uff09, various heuristics, as well as quantum algorithms</li> </ul> </li> </ul>"},{"location":"SE3308/Preface%20%26%20Chapter%200/#fibonacci","title":"Fibonacci","text":""},{"location":"SE3308/Preface%20%26%20Chapter%200/#exponential-algorithm","title":"Exponential Algorithm","text":"<pre><code>function fib1(n):\n    if n=0: return 0\n    if n=1: return 1\n    return fib1(n-1) + fib1(n-2)\n</code></pre> <p>\\(\\(T(n) &lt;= 2\\)\\) for \\(n&lt;=1\\)</p> <ul> <li>2 recursive invocation</li> <li>2 checks</li> <li>1 addition \\(\\(T(n) = T(n-1) + T(n-2) + 3\\)\\) for \\(n&gt;1\\)</li> </ul>"},{"location":"SE3308/Preface%20%26%20Chapter%200/#big-o-notation","title":"Big-O Notation","text":"<ul> <li>\\(f = \\mathcal{O}(g)\\): f grows no faster than g</li> <li>\\(f = \\Omega(g)\\) &lt;=&gt; \\(g = \\mathcal{O}(f)\\): f grows no slower than g</li> <li>\\(f = \\Theta(g)\\): \\(f = \\mathcal{O}(g)\\)\u4e14\\(f=\\Omega(g)\\)</li> </ul> <p>Let f (n) and g(n) be functions from positive integers to positive reals. We say f = O(g) (which means that \u201c f grows no faster than g\u201d) if there is a constant c &gt; 0 such that f (n) \u2264 c \u00b7 g(n)</p>"},{"location":"SE3331/Lecture%201/","title":"Lecture 1","text":"<p>MIT OS &amp; \u5206\u5e03\u5f0f</p> <p>ICS \uff1aFork \u7cfb\u7edf\u8c03\u7528 CSE\uff1a OS\uff1a\u6df1\u5ea6</p> <p>Interactracting set odf components with a specified behavior at hte interface with its environment</p> <p>Linux \u9a71\u52a8 56% 2\u5343\u4e07 \u8f66 \u4e00\u4e2a\u4ebf\uff0c\u63a5\u8fd1\u8001\u9f20\u57fa\u56e0\u7ec4</p> <p>\u7cfb\u7edf\u768414\u4e2a\u5c5e\u6027</p>"},{"location":"SE3331/Lecture%201/#correctness","title":"Correctness","text":"<p>\u5df2\u77e5\u5c31\u662fFeature</p> <p>undefined behavior</p> <pre><code>char* str;\nchar* str_end;\nstr + len &gt; str_end\n</code></pre>"},{"location":"SE3331/Lecture%201/#latency","title":"Latency","text":"<p>\u5f88\u96be\u4f18\u5316\uff0c\u5149\u901f\u9650\u5236</p>"},{"location":"SE3331/Lecture%201/#throughput-capacity","title":"Throughput / Capacity","text":"<p>A Number of transactions CPU\u8d8a\u505a\u8d8a\u5927\uff0c\u5236\u7a0b\u96be\u4ee5\u7f29\u5c0f</p>"},{"location":"SE3331/Lecture%201/#scalability","title":"Scalability","text":"<p>\u968fCore\u589e\u52a0Lock\u8017\u65f6\u53d8\u591a \u52a0\u4eba\u6548\u7387\u4e0d\u4e00\u5b9a\u589e\u52a0</p> <p>CPU\u901a\u4fe1\u5f00\u9500\u589e\u5927</p>"},{"location":"SE3331/Lecture%201/#performance-isolation","title":"Performance Isolation","text":"<p>\u5176\u4ed6\u8fdb\u7a0b\u4fb5\u5360\u6027\u80fd Noisy Neighbor</p>"},{"location":"SE3331/Lecture%201/#utilization","title":"Utilization","text":"<p>\u6570\u636e\u4e2d\u5fc3CPU\u5229\u7528\u7387\u4e0d\u9ad8 \u4e0ePerformance Isolation\u6709\u51b2\u7a81</p>"},{"location":"SE3331/Lecture%201/#energy-efficiently","title":"Energy Efficiently","text":"<p>\u7cbe\u786e\u63a7\u5236\u524d\u540e\u53f0\u8c03\u5ea6\uff0c\u63a7\u5236\u529f\u8017</p>"},{"location":"SE3331/Lecture%201/#compatibility","title":"Compatibility","text":"<p>\u517c\u5bb9\u6027</p> <p>Intel's Itanium, 64-bit, not compatible to x86, died.</p>"},{"location":"SE3331/Lecture%201/#usability","title":"Usability","text":"<p>\u4ea4\u4e92\u597d\u4e0d\u597d\u7528</p>"},{"location":"SE3331/Lecture%201/#consistency","title":"Consistency","text":"<p>\u6570\u636e\u5e93\u53d8\u5316\u8981\u89c2\u6d4b\u5230</p>"},{"location":"SE3331/Lecture%201/#fault-tolerance","title":"Fault Tolerance","text":"<p>\u7cfb\u7edf\u5bb9\u9519\u6027\u5982\u4f55 Cosmic Radiation</p> <p>DDR3\uff0c\u8bfb\u53d6\u5185\u5b58\u7ffb\u8f6c</p>"},{"location":"SE3331/Lecture%201/#security","title":"Security","text":"<p>\u5077\u5bc6\u94a5</p>"},{"location":"SE3331/Lecture%201/#privacy","title":"Privacy","text":"<p>\u65e0\u75d5\u6d4f\u89c8</p>"},{"location":"SE3331/Lecture%201/#system-complexity","title":"System Complexity","text":""},{"location":"SE3331/Lecture%201/#emergent-properties","title":"Emergent Properties","text":"<p>\u7a81\u53d1\u7684\u9650\u5236</p> <p>Ethernet\u7684\u8f7d\u6ce2\u76d1\u542c\u51b2\u7a81\u68c0\u6d4b</p> <ul> <li>\u540c\u65f6\u53d1\u6d88\u606f\u5c31\u53d6\u6d88</li> <li>\u6700\u5c0f\u7684\u5305\u8981\u6ee1\u8db3\u4e00\u5b9a\u5927\u5c0f\u6765\u786e\u4fdd\u68c0\u6d4b\u5bf9\u65b9\u662f\u5426\u51b2\u7a81</li> <li>\u5347\u7ea7\u540e\uff0c\u8ddd\u79bb\u589e\u52a0\uff0c\u5bfc\u81f4\u9700\u8981padding</li> </ul>"},{"location":"SE3331/Lecture%201/#propagation-of-effects","title":"Propagation of Effects","text":"<p>\u8774\u8776\u6548\u5e94</p> <p>\u547c\u53eb\u8f6c\u79fb\uff08Call Forwarding\uff09</p> <p>CNDB\u9690\u85cf\u7535\u8bdd\uff08Call Number Delivery Blocking\uff09</p> <p>ACB\u81ea\u52a8\u56de\u62e8\uff08Automatic Callback\uff09</p> <p>IB\uff08\u5217\u7535\u8bdd\u6e05\u5355\uff09</p> <ul> <li>\u5faa\u73af\u7684\u547c\u53eb\u8f6c\u79fb\uff1f</li> <li>\u9690\u85cf\u7535\u8bdd\u7684\u81ea\u52a8\u56de\u62e8\uff0c\u5bfc\u81f4\u7535\u8bdd\u51fa\u73b0\u5728\u6e05\u5355\u4e0a</li> </ul>"},{"location":"SE3355/Introduction/","title":"Introduction","text":"<p>\u7f16\u8bd1\u539f\u7406 https://compilation-course.github.io/</p>"}]}